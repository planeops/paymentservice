name: Self-hosted test
on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: [nodejs]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compilation
        run: find . -name "*.js" -exec node --check {} +

      - name: Run Gitleaks
        run: |
          gitleaks detect --source . \
            --report-format sarif \
            --report-path gitleaks.sarif \
            --exit-code 1

#      - name: Run Sonar Scanner
#        run: |
#          sonar-scanner \
#            -Dsonar.sources=. \
#            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
#            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#
#      - name: Check SonarQube Quality Gate
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#          SONAR_PROJECT_KEY: paymentservice
#        run: |
#          sleep 10
#          ANALYSIS_ID=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/component?component=$SONAR_PROJECT_KEY" | jq -r '.queue[0].id')
#          for i in {1..30}; do
#            sleep 5
#            STATUS=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/task?id=$ANALYSIS_ID" | jq -r '.task.status')
#            [ "$STATUS" = "SUCCESS" ] && break
#          done
#          RESULT=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY" | jq -r '.projectStatus.status')
#          [ "$RESULT" = "OK" ] || exit 1


      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#
      - name: Run Trivy File System Scan
        run: |
          trivy fs \
            --severity HIGH,CRITICAL \
            --format sarif \
            --output trivy-fs.sarif .

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Build Image
        env:
          SERVICE_NAME: paymentservice
          BUILDKIT_ADDR: tcp://buildkit-service.buildkit.svc.cluster.local:1234
          CACHE_ADDR: http://minio.minio.svc.cluster.local:9000
          fullImage: ghcr.io/planeops/paymentservice/paymentservice:latest
        run: |
          buildctl --addr=${BUILDKIT_ADDR} build \
            --frontend=dockerfile.v0 \
            --local context=. \
            --local dockerfile=. \
            --export-cache type=s3,mode=max,name=${SERVICE_NAME},endpoint_url=${CACHE_ADDR},use_path_style=true \
            --import-cache type=s3,name=${SERVICE_NAME},endpoint_url=${CACHE_ADDR},use_path_style=true \
            --output type=image,name=${fullImage},push=true

      - name: Run Trivy scan via remote server
        env:
          IMAGE: ghcr.io/planeops/paymentservice/paymentservice:latest
        run: |
          trivy image \
            --server http://trivy-server.default:4954 \
            --severity HIGH,CRITICAL \
            --format sarif \
            --output trivy-image.sarif \
            ${{ env.IMAGE }}
          
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-image