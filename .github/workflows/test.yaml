name: Self-hosted test
on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: [nodejs]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compilation
        run: find . -name "*.js" -exec node --check {} +

      - name: Run gitleaks scan
        run: gitleaks detect --source . --exit-code 1 \ 
          --report-format sarif --report-path gitleaks.sarif

#      - name: Upload SARIF to GitHub Security
#        uses: github/codeql-action/upload-sarif@v3
#        with:
#          sarif_file: gitleaks.sarif

#      - name: SonarQube Scan
#        uses: sonarsource/sonarqube-scan-action@master
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#
#      - name: SonarQube Quality Gate check
#        uses: sonarsource/sonarqube-quality-gate-action@master
#        with:
#          pollingTimeoutSec: 600
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#
#      - name: Run Trivy vulnerability scanner in repo mode
#        uses: aquasecurity/trivy-action@0.28.0
#        with:
#          scan-type: 'fs'
#          ignore-unfixed: true
#          format: 'sarif'
#          output: 'trivy-fs.sarif'
#          severity: 'CRITICAL'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Build Image
        env:
          SERVICE_NAME: paymentservice
          BUILDKIT_ADDR: tcp://buildkit-service.buildkit.svc.cluster.local:1234
          CACHE_ADDR: http://minio.minio.svc.cluster.local:9000
          fullImage: ghcr.io/planeops/paymentservice/paymentservice:latest
        run: |
          buildctl --addr=${BUILDKIT_ADDR} build \
            --frontend=dockerfile.v0 \
            --local context=. \
            --local dockerfile=. \
            --export-cache type=s3,mode=max,name=${SERVICE_NAME},endpoint_url=${CACHE_ADDR},use_path_style=true \
            --import-cache type=s3,name=${SERVICE_NAME},endpoint_url=${CACHE_ADDR},use_path_style=true \
            --output type=image,name=${fullImage},push=true

      - name: Run Trivy scan via remote server
        env:
          IMAGE: ghcr.io/planeops/paymentservice/paymentservice:latest
        run: |
          trivy image \
            --server http://trivy-server.default:4954 \
            --severity HIGH,CRITICAL \
            --output trivy.json \
            --output trivy.sarif \
            ${{ env.IMAGE }}
          ls
          
